#include "catch.hpp"
#include "../details/rfc3394aes256keywrap.hpp"

extern "C" {
#include <openssl/applink.c>
}

using namespace DNP3SAv6;
using namespace boost::asio;

TEST_CASE( "Test vectors for RFC 3394", "[rfc3394]" ) {
	Details::RFC3394AES256KeyWrap kwa;
	unsigned char const kek[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F };
	unsigned char key_data[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF };
	unsigned char const expected_ciphertext[] = { 0x64, 0xE8, 0xC3, 0xF9, 0xCE, 0x0F, 0x5B, 0xA2, 0x63, 0xE9, 0x77, 0x79, 0x05, 0x81, 0x8A, 0x2A, 0x93, 0xC8, 0x19, 0x1E, 0x7D, 0x6E, 0x8A, 0xE7 };
	unsigned char encrypted[sizeof(key_data) + 8];
	kwa.wrap(mutable_buffer(encrypted, sizeof(encrypted)), const_buffer(kek, sizeof(kek)), const_buffer(key_data, sizeof(key_data)));
	REQUIRE(memcmp(encrypted, expected_ciphertext, sizeof(encrypted)) == 0);
	unsigned char decrypted[sizeof(key_data)];
	REQUIRE(kwa.unwrap(mutable_buffer(decrypted, sizeof(decrypted)), const_buffer(kek, sizeof(kek)), const_buffer(encrypted, sizeof(encrypted))));
	REQUIRE(memcmp(decrypted, key_data, sizeof(key_data)) == 0);
}