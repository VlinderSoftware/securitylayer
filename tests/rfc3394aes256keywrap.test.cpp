#include "catch.hpp"
#include "../details/rfc3394aes256keywrap.hpp"

extern "C" {
#include <openssl/applink.c>
}

using namespace DNP3SAv6;
using namespace boost::asio;

TEST_CASE( "Test vectors for RFC 3394", "[rfc3394]" ) {
	Details::RFC3394AES256KeyWrap kwa;
	unsigned char const kek[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F };
	unsigned char key_data[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF };
	unsigned char const expected_ciphertext[] = { 0x64, 0xE8, 0xC3, 0xF9, 0xCE, 0x0F, 0x5B, 0xA2, 0x63, 0xE9, 0x77, 0x79, 0x05, 0x81, 0x8A, 0x2A, 0x93, 0xC8, 0x19, 0x1E, 0x7D, 0x6E, 0x8A, 0xE7 };
	unsigned char encrypted[sizeof(key_data) + 8];
	kwa.wrap(mutable_buffer(encrypted, sizeof(encrypted)), const_buffer(kek, sizeof(kek)), const_buffer(key_data, sizeof(key_data)));
	REQUIRE(memcmp(encrypted, expected_ciphertext, sizeof(encrypted)) == 0);
	unsigned char decrypted[sizeof(key_data)];
	REQUIRE(kwa.unwrap(mutable_buffer(decrypted, sizeof(decrypted)), const_buffer(kek, sizeof(kek)), const_buffer(encrypted, sizeof(encrypted))));
	REQUIRE(memcmp(decrypted, key_data, sizeof(key_data)) == 0);
}

TEST_CASE( "80 bytes of data", "[rfc3394]" ) {
	Details::RFC3394AES256KeyWrap kwa;
	unsigned char const kek[] = {
          0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
        , 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        };

    unsigned char key_data[] = {
          0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
        , 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        , 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F
        , 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
        , 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F
        };
	unsigned char const expected_ciphertext[] = {
          0x2c, 0x06, 0x55, 0xd2, 0x21, 0x03, 0xc0, 0x3f, 0x53, 0x76, 0x30, 0xb7, 0xb8, 0x88, 0x97, 0x0b
        , 0x18, 0xb3, 0xe2, 0xda, 0x10, 0x45, 0x6d, 0xfe, 0xb4, 0xe3, 0xd9, 0x1d, 0x13, 0x7c, 0xe4, 0x35
        , 0x2b, 0x5c, 0xa9, 0xf5, 0x6d, 0x5c, 0x37, 0x65, 0xf1, 0x9c, 0x1d, 0xb2, 0xc4, 0x15, 0x94, 0x23
        , 0xae, 0x07, 0xcd, 0x56, 0x6e, 0x26, 0xbf, 0xd6, 0x52, 0x53, 0x0a, 0x45, 0x4e, 0x20, 0xb5, 0xd1
        , 0x62, 0xf0, 0x64, 0x6a, 0x8b, 0x40, 0x97, 0x0c, 0x31, 0xe6, 0xa4, 0x48, 0x3f, 0x58, 0x21, 0xf9
        , 0x07, 0x5f, 0xc5, 0x8f, 0x41, 0xe9, 0x78, 0x32
        };
	unsigned char encrypted[sizeof(key_data) + 8];
	kwa.wrap(mutable_buffer(encrypted, sizeof(encrypted)), const_buffer(kek, sizeof(kek)), const_buffer(key_data, sizeof(key_data)));
	REQUIRE(memcmp(encrypted, expected_ciphertext, sizeof(encrypted)) == 0);
	unsigned char decrypted[sizeof(key_data)];
	REQUIRE(kwa.unwrap(mutable_buffer(decrypted, sizeof(decrypted)), const_buffer(kek, sizeof(kek)), const_buffer(encrypted, sizeof(encrypted))));
	REQUIRE(memcmp(decrypted, key_data, sizeof(key_data)) == 0);
}

TEST_CASE( "80 bytes of data (2)", "[rfc3394]" ) {
	Details::RFC3394AES256KeyWrap kwa;
	unsigned char const kek[] = {
          0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
        , 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
        };
	unsigned char key_data[] = {
          0x4f, 0x2b, 0x65, 0xf6, 0x96, 0xde, 0xd0, 0x46, 0x2e, 0x79, 0xf9, 0x86, 0x67, 0xfc, 0xcd, 0x75
        , 0xa4, 0x4d, 0x2a, 0xb8, 0xb9, 0xd7, 0xa9, 0xa0, 0x65, 0x66, 0xc0, 0xde, 0xce, 0x47, 0x93, 0x83
        , 0xb0, 0x3a, 0xdd, 0xc1, 0x25, 0xcf, 0x21, 0x50, 0x88, 0x29, 0x59, 0x4a, 0x27, 0x57, 0x9e, 0x81
        , 0xfd, 0xf5, 0xed, 0xaa, 0xca, 0xb4, 0xde, 0x90, 0xe0, 0xe4, 0x15, 0x08, 0x74, 0xbc, 0xd3, 0x0e
        , 0x80, 0x35, 0xba, 0x56, 0x11, 0x74, 0x00, 0x1b, 0xb8, 0x18, 0x8b, 0xd3, 0x93, 0x81, 0xf0, 0xcc
        };
	unsigned char const expected_ciphertext[] = {
          0x22, 0x3d, 0x4b, 0xd6, 0x49, 0xd8, 0x47, 0x6b, 0x58, 0x81, 0xa6, 0x59, 0x91, 0xb4, 0xe0, 0xc5
        , 0x15, 0x33, 0x7a, 0xc6, 0x5e, 0xbb, 0x57, 0xe2, 0x97, 0x73, 0xb4, 0x27, 0x7b, 0xbf, 0x3f, 0xd6
        , 0x87, 0xe5, 0xfd, 0x53, 0x50, 0x56, 0x9a, 0x43, 0x0e, 0x56, 0xf0, 0xdd, 0xd5, 0x57, 0x0f, 0x10
        , 0x79, 0x2d, 0x4b, 0x59, 0x13, 0xa2, 0xce, 0x75, 0xe4, 0x1f, 0xad, 0x63, 0xa0, 0x49, 0xff, 0xe1
        , 0xb3, 0x8e, 0x7a, 0xfa, 0x5a, 0x01, 0xcf, 0x39, 0xf5, 0xe3, 0xf7, 0xf7, 0xeb, 0xcd, 0xdb, 0x72
        , 0x62, 0xb8, 0x03, 0xf9, 0xbf, 0x8f, 0x9d, 0xad
        };
	unsigned char encrypted[sizeof(key_data) + 8];
	kwa.wrap(mutable_buffer(encrypted, sizeof(encrypted)), const_buffer(kek, sizeof(kek)), const_buffer(key_data, sizeof(key_data)));
	REQUIRE(memcmp(encrypted, expected_ciphertext, sizeof(encrypted)) == 0);
	unsigned char decrypted[sizeof(key_data)];
	REQUIRE(kwa.unwrap(mutable_buffer(decrypted, sizeof(decrypted)), const_buffer(kek, sizeof(kek)), const_buffer(encrypted, sizeof(encrypted))));
	REQUIRE(memcmp(decrypted, key_data, sizeof(key_data)) == 0);
}

